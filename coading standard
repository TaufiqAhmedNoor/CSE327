Programming standard: 

First we need to know what programming standard is.  Programming standards are an important feature of software development.  One needs to ensure a coding standard specifying different programming language methods and different processes for a particular programming language.  Which all team members have to abide by while working on the project.  This will keep the program code the same and it will look like it was created by a single developer in a single session.

Coding standard we should follow:

• The code should be easy to be read by every team members.

• We should try to bifurcate different sections of the developed code by segmenting blocks of code into a certain paragraph.

•We should try to make use of indentation for indicating the beginning and end of the control structures with a clear mentioning of where an exact code is between them.

•There should be consistency in the naming convention of the variables throughout the developed code.

•Name the functions based on what they perform.

• The code should be easily understood even after returning to it after some time.

• Follow a specific method for commenting on the work. The language functions which are complex or the structure which is difficult to be comprehended should be avoided.

1. HTML Standard:
*----------------*


 	 1.1. Declare document type

Always declare the document type as the first line in your document. And we also use html5.

Example:

<!DOCTYPE html>

	
   1.2. Validation

HTML pages should be verified against the W3C validator to ensure that the markup is well formed. This in and of itself is not directly indicative of good code, but it helps to weed out problems that are able to be tested via automation. It is no substitute for manual code review. (For other validators, see HTML Validation in the Codex.)

  	 1.3. Self-closing Elements 
 
All tags must be properly closed. For tags that can wrap nodes such as text or other elements, termination is a trivial enough task. For tags that are self-closing, the forward slash should have exactly one space preceding it.

Example: 
<p>This is a paragraph.<\p>

Not to do:
 <p>This is a paragraph.
	
	1.3. Attributes and Tags  

All tags and attributes must be written in lowercase. Additionally, attribute values should be lowercase when the purpose of the text therein is only to be interpreted by machines. For instances in which the data needs to be human readable, proper title capitalization should be followed.

Example1: 
<body>
<p>This is a paragraph.</p>
</body>

Not to do:
<BODY>
<P>This is a paragraph.</P>
</BODY>

Example 2:
<a href="https://www.w3schools.com/html/">Visit our HTML tutorial</a>

Not to do:
<a HREF="https://www.w3schools.com/html/">Visit our HTML tutorial</a>

	1.4. Always Quote Attribute Values

HTML allows attribute values without quotes. But we should quoting attribute values, because:

Developers normally quote attribute values

Quoted values are easier to read

You MUST use quotes if the value contains spaces

Example:

<table class="striped">

Not to do:

<table class=striped>

	1.5. For adding Images

Always specify the alt attribute for images. This attribute is important if the image for some reason cannot be displayed.

Also, always define the width and height of images. This reduces flickering, because the browser can reserve space for the image before loading.

Example:
<img src="html5.gif" alt="HTML5" style="width:128px;height:128px">

Not to do:
<img src="html5.gif">

	1.6. Spaces and Equal Signs

HTML allows spaces around equal signs. But space-less is easier to read and groups entities better together.

Example:

<link rel="stylesheet" href="styles.css">

Not to do:

<link rel = "stylesheet" href = "styles.css">

	1.7. For listing

Example:
<ul>
  <li>London</li>
  <li>Paris</li>
  <li>Tokyo</li>
</ul>

	1.8. For making table

Example:

<table>
  <tr>
    <th>Name</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>A</td>
    <td>Description of A</td>
  </tr>
  <tr>
    <td>B</td>
    <td>Description of B</td>
  </tr>
</table>

	1.9. Use Comments
By using comments everyone can understand the code easily and it will be easy to find out part by part.

Example:

<!-- This is a comment -->
 
	1.10. Style Sheets

Use simple syntax for linking to style sheets (the type attribute is not necessary).
Example:

<link rel="stylesheet" href="styles.css">








2. CSS Standard:
*----------------*

            2.1. Structure
  
1. Use tabs, not spaces, to indent each property.
2.	Add two blank lines between sections and one blank line between blocks in a section.
3. Each selector should be on its own line, ending in either a comma or an opening curly brace. Property-value pairs should be on their own line, with one tab of indentation and an ending semicolon. The closing brace should be flush left, using the same level of indentation as the opening selector.

Example:

.selector-1,

.selector-2,

.selector-3 {

    background: #fff;

    color: #000;

}

Not to do:

 .selector-1, .selector-2, .selector-3 {

    background: #fff;

    color: #000;

    }

 or

.selector-1 { background: #fff; color: #000; }


	2.2. Properties  

1. 	Properties should be followed by a colon and a space.
2.	All properties and values should be lowercase, except for font names and vendor-specific properties.
3. 	Use hex code for colors, or rgba() if opacity is needed. Avoid RGB format and uppercase, and shorten values when possible: #fff instead of #FFFFFF.
4. Use shorthand (except when overriding styles) for background, border, font, list-style, margin, and padding values as much as possible. (For a shorthand reference, see CSS Shorthand.)

.selector-1 {

    background: #fff;

    display: block;

    margin: 0;

    margin-left: 20px;

}

Incorrect:

.selector-1 {

    background:#FFFFFF;

    display: BLOCK;

    margin-left: 20PX;

    margin: 0;

}



	2.3. Values  

There are numerous ways to input values for properties. Follow the guidelines below to help us retain a high degree of consistency.
1. Space before the value, after the colon.
2.	Do not pad parentheses with spaces.
3. Always end in a semicolon.
4. Use double quotes rather than single quotes, and only when needed, such as when a font name has a space or for the values of the content property.
5.	Font weights should be defined using numeric values (e.g. 400 instead of normal, 700 rather than bold).
5.	0 values should not have units unless necessary, such as with transition-duration.
6. 	Lists of values within a value, like within rgba(), should be separated by a space.

Example:1

.class { /* Correct usage of quotes */

    background-image: url(images/bg.png);

    font-family: "Helvetica Neue", sans-serif;

    font-weight: 700;

}

 Example:2

.class { /* Correct usage of zero values */

    font-family: Georgia, serif;

    line-height: 1.4;

    text-shadow:

        0 -1px 0 rgba(0, 0, 0, 0.5),

        0 1px 0 #fff;

}

 Example:3

.class { /* Correct usage of short and lengthier multi-part values */

    font-family: Consolas, Monaco, monospace;

    transition-property: opacity, background, color;

    box-shadow:

        0 0 0 1px #5b9dd9,

        0 0 2px 1px rgba(30, 140, 190, 0.8);

}



	2.4. Commenting 

Use comments that every team meambers can understand easily.

Example:

/**

 * comment here

 *background will be white
*Margin in left

 */

.selector-1 {

    background:#FFFFFF;

    display: BLOCK;

    margin-left: 20PX;

    margin: 0;
 

3. Javascript Standard:
*-----------------------*

	

	3.1. Spacing  

Use spaces liberally throughout your code. “When in doubt, space it out.” Always use extra space. So that the program will be neat and clean and will not be difficult to understand.
array = [ a, b ];

 foo( arg );
foo( 'string', object );
foo( options, object[ property ] );
foo( node, 'property', 2 );
prop = object[ 'default' ];
firstArrayElement = arr[ 0 ];


	3.2. Objects  

Objects and arrays can be declared on a single line if they are short (remember the line length guidelines). When an object or array is too long to fit on one line, each member must be placed on its own line and each line ended by a comma.

Example:
var obj = {

 ready: 9,

    when: 4,

    'you are': 15,

};

var arr = [  9,
4,
15
];



	3.3. Semicolons  

Use them. Never rely on Automatic Semicolon Insertion (ASI).
Blocks and Curly Braces #Blocks and Curly Braces
if, else, for, while, and try blocks should always use braces, and always go on multiple lines. The opening brace should be on the same line as the function definition, the conditional, or the loop. The closing brace should be on the line directly following the last statement of the block.
Indentation and Line Breaks #Indentation and Line Breaks
Indentation and line breaks add readability to complex statements.
Tabs should be used for indentation. Even if the entire file is contained in a closure (i.e., an immediately invoked function), the contents of that function should be indented by one tab.

Example:
( function ( $ ) {

    // Expressions indented

<pre><code>function doSomething() {

    // Expressions indented

}

</code></pre>

} )( jQuery );


         3.4. Comments

Comments come before the code to which they refer, and should always be preceded by a blank line. Capitalize the first letter of the comment, and include a period at the end when writing full sentences. There must be a single space between the comment token (//) and the comment text.

Example:
someStatement();

// Explanation of something complex on the next line

$( 'p' ).doSomething();

// This is a comment that is long enough to warrant being stretched

// over the span of multiple lines.



	3.5. Equality  

Strict equality checks (===) must be used in favor of abstract equality checks (==).

String: typeof object === 'string'
Number: typeof object === 'number'
Boolean: typeof object === 'boolean'
Object: typeof object === 'object
null: object === null
null or undefined: object == null

    3.6. String

Use single-quotes for string literals.

Example:

var myStr = 'strings should be contained in 

     3.7. Switch case
     
When using switch statements:
1. Use a break for each case other than default. When allowing statements to “fall through,” note that explicitly
2. Indent case statements one tab within the switch.

Example:
switch ( event.keyCode ) {

    // ENTER and SPACE both trigger x()

    case $.ui.keyCode.ENTER:

    case $.ui.keyCode.SPACE:

        x();

        break;

    case $.ui.keyCode.ESCAPE:

        y();

        break;

    default:

        z();

}


	3.8. Arrays  

Creating arrays in JavaScript should be done using the shorthand [] constructor rather than the new Array() notation.

Example:
var myArray = [];




4. Php standards
*----------------*

	4.1. Opening and Closing PHP Tags 

When embedding multi-line PHP snippets within a HTML block, the PHP open and close tags must be on a line by themselves.

Example:

function foo() {

    ?>

<div>

        </div>

<pre><code><?php

</code></pre>

}

	4.2. No shorthand PHP Tags

Important: Never use shorthand PHP start tags. Always use full PHP tags.

Example:

<?php ... ?>

<?php echo $var; ?>

Not to do:

<? ... ?>

<?= $var ?>



	4.3. Single and Double Quotes 

Use single and double quotes when appropriate. If you’re not evaluating anything in the string, use single quotes. You should almost never have to escape quotes in a string, because you can just alternate your quoting style, like so:

Example:

echo '<a href="/static/link" title="Yeah yeah!">Link name</a>';

echo "<a href='$link' title='$linktitle'>$linkname

	4.4. Use tabs

Use real tabs and not spaces, as this allows the most flexibility across clients.

Exception: if you have a block of code that would be more readable if things are aligned, use spaces:

[tab]$foo   = 'somevalue';

[tab]$foo2  = 'somevalue2';

	4.5. Brace Style

Braces shall be used for all blocks in the style shown here:

if ( condition ) {

    action1();

    action2();

} elseif ( condition2 && condition3 ) {

    action3();

    action4();

} else {

    defaultaction();

}
